"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

type Query {
    users: [User!]! @paginate(defaultCount: 10)
    user(id: ID @eq): User @find
	articles: [Article!]! @all
    article(user_id: Int! @eq): [Article] @all
    greet(name: String!): String
    allnews: String!
}

type Mutation {
    login(input: LoginInput @spread): AuthPayload! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Login@resolve")
    refreshToken(input: RefreshTokenInput @spread): RefreshTokenPayload! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\RefreshToken@resolve")
    logout: LogoutResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Logout@resolve")
    forgotPassword(input: ForgotPasswordInput! @spread): ForgotPasswordResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\ForgotPassword@resolve")
    updateForgottenPassword(input: NewPasswordWithCodeInput @spread): ForgotPasswordResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\ResetPassword@resolve")
    registery(input: RegisterInput @spread): RegisterResponse! @field(resolver: "Registery@resolve")
    socialLogin(input: SocialLoginInput! @spread): AuthPayload! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\SocialLogin@resolve")
    verifyEmail(input: VerifyEmailInput! @spread): AuthPayload! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\VerifyEmail@resolve")
    updateThePassword(input: UpdatePassword! @spread): UpdatePasswordResponse! @field(resolver: "UpdateThePassword@resolve") @guard(with: ["api"]) 
	
	createArticle(input: CreateArticleInput! @spread): Article! @middleware(checks: ["auth:api"]) @create
    dropArticle(input:dropArticleInput! @spread): dropArticleResponse!  @middleware(checks: ["auth:api"]) @field(resolver: "DeleteArticle@resolve") 
}

type User {
    id: ID!
    name: String!
    email: String!
	birthday: Date!
    created_at: DateTime!
    updated_at: DateTime!
	articles: [Article!]! @belongsToMany(relation: "articles")
}

type Article {
    id: ID!
    title: String!
    author_name: String!
    published_at: Date!
    content: String!
    article_url: String!
    image_url: String!
    created_at: DateTime!
    updated_at: DateTime!
}

input CreateArticleInput {
    user_id: Int!
    title: String!
    author_name: String!
    published_at: Date!
    content: String!
    article_url: String!
    image_url: String!
}

input dropArticleInput{
    user_id: Int!
    title: String!
}

type dropArticleResponse{
    status: String!
}